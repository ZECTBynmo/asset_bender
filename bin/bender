#! /usr/bin/env ruby

# Make bundler happy (make the cwd where the Gemfile is)
cwd = Dir.pwd
Dir.chdir File.expand_path('../..', __FILE__)

require 'bundler/setup'
require 'gli'
require 'sprockets'
require 'compass'
require 'sprockets-sass'
require 'sprockets-helpers'

# Move back to the directory we started in so all other code
# gets the correct `Dir.pwd`
Dir.chdir cwd

bender_path = File.expand_path(File.join(File.dirname(__FILE__), '../lib/'))
$LOAD_PATH.unshift(bender_path) unless $LOAD_PATH.include?(bender_path)

require 'asset_bender'
require 'asset_bender/commands'

include GLI::App
program_desc 'Asset Bender'

flag [:m, :mode], :default_value => "development"

# pre do |global_options,command,options,args|
#   $todo_list = Hacer::Todolist.new(global_options[:tasklist])
# end


desc 'Run'
long_desc "Starts the Asset Bender server in the foreground. Output is logged to the terminal"

command :run do |c|
  c.action do |global_options, options, args|
    AssetBender::Commands::Run.new(global_options, options, args).run
  end
end


desc 'Start'
long_desc "Starts the Asset Bender server in the background. The output is logged to #{File.join bender_path, 'log/'}"

command :start do |c|
  c.action do |global_options, options, args|
    AssetBender::Commands::Start.new(global_options, options, args).run
  end
end


desc 'Stop'
long_desc "Stops the Asset Bender server, whether it currently in the foreground or background."

command :stop do |c|
  c.action do |global_options, options, args|
    AssetBender::Commands::Stop.new(global_options, options, args).run
  end
end


desc 'Restart'
long_desc "Stops and then starts the Asset Bender server in the background."

command :restart do |c|
  c.action do |global_options, options, args|
    AssetBender::Commands::Restart.new(global_options, options, args).run
  end
end


desc 'Clear cache'
long_desc "Clears the Asset Bender cache. You shouldn't need it, but it might help out if you think something is messed up."

command :clear_cache do |c|
  c.action do |global_options, options, args|
    AssetBender::Commands::ClearCache.new(global_options, options, args).run
  end
end


desc 'Install dependencies'
long_desc 'Installes/updates the dependencies for the project in the current directory (or pass one or more paths).'

command :install do |c|
  c.action do |global_options, options, args|
    bender_command = AssetBender::Commands::Install.new global_options, options, args
    bender_command.run
  end
end


desc 'Update dependencies'
long_desc 'Updates the dependencies for one more more projects. If no arguments are passed, every project in your configuration is updated. But you can also pass in one or more project names/paths to only update specific projects'

command :update_deps, 'update-deps' do |c|
  c.action do |global_options, options, args|
    bender_command = AssetBender::Commands::UpdateDeps.new global_options, options, args
    bender_command.run
  end
end


desc 'Precompiles project'
long_desc 'Compiles all of the files in a project to a target directory.'

command :precompile do |c|
  c.flag [:o, :output]
  c.flag [:p, :processes]

  c.action do |global_options, options, args|

    help_now!('Must include path to precompile') if args.empty?
    help_now!('Must include output directory') unless options[:output]

    bender_command = AssetBender::Commands::Precompile.new global_options, options, args
    bender_command.run
  end
end

exit run(ARGV)
